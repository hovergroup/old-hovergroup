#!/bin/bash

if [ -z "$1" ] ; then
    echo "GenMOOSApp: usage: $0 [app-name] [prefix] [author]"
    exit 0
fi

if [ -z "$2" ] ; then
    echo "GenMOOSApp: usage: $0 [app-name] [prefix] [author]"
    exit 0
fi

if [ -z "$3" ] ; then
    echo "GenMOOSApp: usage: $0 [app-name] [prefix] [author]"
    exit 0
fi

NOW=$(date +"%b %d, %Y")

mkdir $2$1
cd $2$1

cat >> CMakeLists.txt <<EOF
# ---------------------------------------------
# $2$1
#        File: CMakeLists.txt
#  Created on: $NOW
#      Author: $3
# ---------------------------------------------

# FILE(GLOB SRC *.cpp)

SET(SRC
    ${1}.cpp
    ${1}_Info.cpp
    main.cpp
)



ADD_EXECUTABLE($2$1 \${SRC})

TARGET_LINK_LIBRARIES($2$1
    mbutil
    \${MOOS_LIBRARIES}
    \${MOOS_DEPEND_LIBRARIES}
    )

EOF


cat >> ${1}.h <<EOF
/*
 * $3
 *        File: ${1}.h
 *  Created on: $NOW
 *      Author: $3
 */

#ifndef ${1}_HEADER
#define ${1}_HEADER

#include "MOOS/libMOOS/MOOSLib.h"

class ${1} : public CMOOSApp
{
public:
    ${1}();
    ~${1}();

protected:
    bool OnNewMail(MOOSMSG_LIST &NewMail);
    bool Iterate();
    bool OnConnectToServer();
    bool OnStartUp();

private:
};

#endif 
EOF

cat >> main.cpp <<EOF
/*
 * $3
 *        File: main.cpp
 *  Created on: $NOW
 *      Author: $3
 */

#include <string>
#include "MBUtils.h"
#include "ColorParse.h"
#include "${1}.h"
#include "${1}_Info.h"

using namespace std;

int main(int argc, char *argv[])
{
    string mission_file;
    string run_command = "${2}${1}";

    for(int i=1; i<argc; i++) {
        string argi = argv[i];
        if((argi=="-v") || (argi=="--version") || (argi=="-version"))
            showReleaseInfoAndExit();
        else if((argi=="-e") || (argi=="--example") || (argi=="-example"))
            showExampleConfigAndExit();
        else if((argi == "-h") || (argi == "--help") || (argi=="-help"))
            showHelpAndExit();
        else if((argi == "-i") || (argi == "--interface"))
            showInterfaceAndExit();
        else if(strEnds(argi, ".moos") || strEnds(argi, ".moos++"))
            mission_file = argv[i];
        else if(strBegins(argi, "--alias="))
            run_command = argi.substr(8);
        else if(i==2)
            run_command = argi;
    }
  
    if(mission_file == "")
        showHelpAndExit();

    cout << termColor("green");
    cout << "${2}${1} launching as " << run_command << endl;
    cout << termColor() << endl;

    ${1} ${1};

    ${1}.Run(run_command.c_str(), mission_file.c_str());
    
    return(0);
}

EOF

cat >> $2${1}.moos <<EOF
//------------------------------------------------
// ${2}${1} config block

ProcessConfig = ${2}${1}
{
    AppTick = 5
    IterateMode = 0 // regular iterate and mail
}

EOF

cat >> ${1}.cpp <<EOF
/*
 * $3
 *        File: ${1}.cpp
 *  Created on: $NOW
 *      Author: $3
 */

#include <iterator>
#include "MBUtils.h"
#include "${1}.h"

using namespace std;

//---------------------------------------------------------
// Constructor

${1}::${1}()
{
}

//---------------------------------------------------------
// Destructor

${1}::~${1}()
{
}

//---------------------------------------------------------
// Procedure: OnNewMail

bool ${1}::OnNewMail(MOOSMSG_LIST &NewMail)
{
    MOOSMSG_LIST::iterator p;

    for(p=NewMail.begin(); p!=NewMail.end(); p++) {
        CMOOSMsg &msg = *p;
        string key = msg.GetKey();
        if (key == "VARIABLE") {
            string val = msg.GetString();
        }
    }

    return(true);
}

//---------------------------------------------------------
// Procedure: OnConnectToServer

bool ${1}::OnConnectToServer()
{
    m_Comms.Register("VARIABLE", 0);
    return true;
}

//---------------------------------------------------------
// Procedure: Iterate()
//            happens AppTick times per second

bool ${1}::Iterate()
{
    return true;
}

//---------------------------------------------------------
// Procedure: OnStartUp()
//            happens before connection is open

bool ${1}::OnStartUp()
{
    string config_val;
    m_MissionReader.GetConfigurationParam("config_var", config_val);

    return true;
}

EOF


cat >> ${1}_Info.h <<EOF
/*
 * $3
 *        File: ${1}_Info.h
 *  Created on: $NOW
 *      Author: $3
 */

#ifndef ${1}_INFO_HEADER
#define ${1}_INFO_HEADER

void showSynopsis();
void showHelpAndExit();
void showExampleConfigAndExit();
void showInterfaceAndExit();
void showReleaseInfoAndExit();

#endif

EOF


cat >> ${1}_Info.cpp <<EOF
/*
 * $3
 *        File: ${1}_Info.cpp
 *  Created on: $NOW
 *      Author: $3
 */

#include <cstdlib>
#include <iostream>
#include "${1}_Info.h"
#include "ColorParse.h"
#include "ReleaseInfo.h"

using namespace std;

//----------------------------------------------------------------
// Procedure: showSynopsis

void showSynopsis()
{
    blk("SYNOPSIS:                                                       ");
    blk("------------------------------------                            ");
    blk("  The ${2}${1} application is used for               ");
    blk("                                                                ");
    blk("                                                                ");
    blk("                                                                ");
    blk("                                                                ");
}

//----------------------------------------------------------------
// Procedure: showHelpAndExit

void showHelpAndExit()
{
    blk("                                                                ");
    blu("=============================================================== ");
    blu("Usage: ${2}${1} file.moos [OPTIONS]                   ");
    blu("=============================================================== ");
    blk("                                                                ");
    showSynopsis();
    blk("                                                                ");
    blk("Options:                                                        ");
    mag("  --alias","=<ProcessName>                                      ");
    blk("      Launch ${2}${1} with the given process name         ");
    blk("      rather than ${2}${1}.                           ");
    mag("  --example, -e                                                 ");
    blk("      Display example MOOS configuration block.                 ");
    mag("  --help, -h                                                    ");
    blk("      Display this help message.                                ");
    mag("  --interface, -i                                               ");
    blk("      Display MOOS publications and subscriptions.              ");
    mag("  --version,-v                                                  ");
    blk("      Display the release version of ${2}${1}.        ");
    blk("                                                                ");
    blk("Note: If argv[2] does not otherwise match a known option,       ");
    blk("      then it will be interpreted as a run alias. This is       ");
    blk("      to support pAntler launching conventions.                 ");
    blk("                                                                ");
    exit(0);
}

//----------------------------------------------------------------
// Procedure: showExampleConfigAndExit

void showExampleConfigAndExit()
{
    blk("                                                                ");
    blu("=============================================================== ");
    blu("${2}${1} Example MOOS Configuration                   ");
    blu("=============================================================== ");
    blk("                                                                ");
    blk("ProcessConfig = ${2}${1}                              ");
    blk("{                                                               ");
    blk("  AppTick   = 4                                                 ");
    blk("  CommsTick = 4                                                 ");
    blk("                                                                ");
    blk("}                                                               ");
    blk("                                                                ");
    exit(0);
}


//----------------------------------------------------------------
// Procedure: showInterfaceAndExit

void showInterfaceAndExit()
{
    blk("                                                                ");
    blu("=============================================================== ");
    blu("${2}${1} INTERFACE                                    ");
    blu("=============================================================== ");
    blk("                                                                ");
    showSynopsis();
    blk("                                                                ");
    blk("SUBSCRIPTIONS:                                                  ");
    blk("------------------------------------                            ");
    blk("  NODE_MESSAGE = src_node=alpha,dest_node=bravo,var_name=FOO,   ");
    blk("                 string_val=BAR                                 ");
    blk("                                                                ");
    blk("PUBLICATIONS:                                                   ");
    blk("------------------------------------                            ");
    blk("  Publications are determined by the node message content.      ");
    blk("                                                                ");
    exit(0);
}

//----------------------------------------------------------------
// Procedure: showReleaseInfoAndExit

void showReleaseInfoAndExit()
{
    showReleaseInfo("${2}${1}", "gpl");
    exit(0);
}

EOF


echo "$2${1} generated"
