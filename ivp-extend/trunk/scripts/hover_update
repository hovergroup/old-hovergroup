#!/bin/bash

HOVERGROUP_SVN_URL="https://hovergroup.googlecode.com/svn/trunk"
MOOS_IVP_URL="https://oceanai.mit.edu/svn/moos-ivp-aro/releases/moos-ivp-13.5"

declare -A MOOS_INFO

MOOS_INFO["0:NAME"]="core"
MOOS_INFO["0:URL"]="https://github.com/themoos/core-moos.git"
MOOS_INFO["0:TAG"]="10.0.1-release"

MOOS_INFO["1:NAME"]="essential"
MOOS_INFO["1:URL"]="https://github.com/themoos/essential-moos.git"
MOOS_INFO["1:TAG"]="10.0.1-release"

MOOS_INFO["2:NAME"]="ui"
MOOS_INFO["2:URL"]="https://github.com/themoos/ui-moos.git"
MOOS_INFO["2:TAG"]="10.0.0"

MOOS_INFO["3:NAME"]="matlab"
MOOS_INFO["3:URL"]="https://github.com/themoos/matlab-moos.git"
MOOS_INFO["3:TAG"]="10.0.0"

MOOS_INFO["4:NAME"]="geodesy"
MOOS_INFO["4:URL"]="https://github.com/themoos/geodesy-moos.git"
MOOS_INFO["4:TAG"]="10.0.0"

NUM_THREADS=1
START_DIRECTORY=$HOME

DO_IVP=false
DO_MOOS=false
DO_HOVER=false
INTERACTIVE=true
HELP=false

ynprompt() {
    printf "$1 "
    read -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]] ; then
        printf "\n"
        return 0
    else
        printf "\n"
        return 1
    fi
}  

for ARGI; do
    UNDEFINED_ARG=$ARGI
    if [ "${ARGI}" = "--help" -o "${ARGI}" = "-h" ] ; then
        HELP=true
        UNDEFINED_ARG=""
    elif [ "${ARGI:0:2}" = "-j" ] ; then
        NUM_THREADS="${ARGI#-j*}"
        UNDEFINED_ARG=""
    elif [ "${ARGI}" = "--force" -o "${ARGI}" = "-f" ] ; then
        INTERACTIVE="false"
        UNDEFINED_ARG=""
    elif [ "${ARGI}" = "--moos" -o "${ARGI}" = "-m" ] ; then
        DO_MOOS="true"
        UNDEFINED_ARG=""
    elif [ "${ARGI}" = "--ivp" -o "${ARGI}" = "-i" ] ; then
        DO_IVP="true"
        UNDEFINED_ARG=""
    elif [ "${ARGI}" = "--hover" -o "${ARGI}" = "-o" ] ; then
        DO_HOVER="true"
        UNDEFINED_ARG=""
    else
        START_DIRECTORY=${ARGI}
    fi
done

if $HELP ; then
    printf "Usage: hover_update [location] [-j4] [options]\n"
    printf "Options:                                      \n"
    printf "  --moos, -m             update moos          \n"
    printf "  --ivp, -i              update ivp           \n"
    printf "  --hover, -o            update hover         \n"
    printf "  --force, -f            non-interactive mode \n"
    exit 1;
fi

# check start directory exists
if [ ! -d $START_DIRECTORY ] ; then
    printf "$START_DIRECTORY does not exist.\n"
    exit 1;
fi

# check for sub-directories and prompt to create
if [ $DO_MOOS -a ! -d $START_DIRECTORY/moos ] ; then
    if ynprompt "$START_DIRECTORY/moos does not exist, create? [y/N]" ; then
        mkdir $START_DIRECTORY/moos
    else
        exit 1;
    fi
fi
if [ $DO_IVP -a ! -d $START_DIRECTORY/moos-ivp ] ; then
    printf "Could not find $START_DIRECTORY/moos-ivp\n"
    exit 1;
fi
if [ $DO_HOVER -a ! -d $START_DIRECTORY/hovergroup ] ; then
    printf "Could not find $START_DIRECTORY/hovergroup\n"
    exit 1;
fi


if [ $DO_MOOS ] ; then
    echo -e "\e[1;35mUpdating MOOS\e[0m"
    
    for INDEX in {0..4} ; do
        cd $START_DIRECTORY/moos
        REBUILD=false
        
        # check for subdirectory
        SUBDIR="${MOOS_INFO["$INDEX:NAME"]}-moos"
        echo -e "Updating $SUBDIR"
        if [ ! -d $SUBDIR ] ; then
            git clone ${MOOS_INFO["$INDEX:URL"]} $SUBDIR
        fi
        cd $SUBDIR
        
        # check git url
        GIT_URL=$(git config --get remote.origin.url)
        if [ ! "${GIT_URL}" = "${MOOS_INFO["$INDEX:URL"]}" ] ; then
            # if incorrect, wipe directory and recreate
            if [ $INTERACTIVE ] ; then
                if ! ynprompt "Wipe $START_DIRECTORY/moos/$SUBDIR? [y/N]"; then
                    exit 1;
                fi
            fi
            cd $START_DIRECTORY/moos
            rm -rf $SUBDIR
            git clone ${MOOS_INFO["$INDEX:URL"]} $SUBDIR
            cd $SUBDIR
        fi
          
    done
    
    
fi

exit 0;

if [ $DO_HOVER ] ; then

SVN_URL=$(svn info $START_DIRECTORY | grep URL | sed 's/URL: //g')

if [ ! "${SVN_URL}" = "${HOVERGROUP_SVN_URL}" ]; then
    printf "$START_DIRECTORY doesn't seem right\n"
    exit 1;
fi

SVN_VAL=$(svn up $START_DIRECTORY)

echo $SVN_VAL

if [ -z "$SVN_VAL" ]; then
    printf "svn update failed\n"
    exit 1;
fi

cd $START_DIRECTORY/ivp-extend/trunk
make -j$NUM_THREADS

exit 0;
