#!/bin/bash
set -e

MOOS_IVP_URL="https://oceanai.mit.edu/svn/moos-ivp-aro/releases/moos-ivp-13.5"
GOBY_URL="http://bazaar.launchpad.net/~goby-dev/goby/2.0/"

declare -A MOOS_INFO

MOOS_INFO["0:NAME"]="core"
MOOS_INFO["0:URL"]="https://github.com/themoos/core-moos.git"
MOOS_INFO["0:TAG"]="10.0.1-release"

MOOS_INFO["1:NAME"]="essential"
MOOS_INFO["1:URL"]="https://github.com/themoos/essential-moos.git"
MOOS_INFO["1:TAG"]="10.0.0-release"

MOOS_INFO["2:NAME"]="ui"
MOOS_INFO["2:URL"]="https://github.com/themoos/ui-moos.git"
MOOS_INFO["2:TAG"]=""

MOOS_INFO["3:NAME"]="matlab"
MOOS_INFO["3:URL"]="https://github.com/themoos/matlab-moos.git"
MOOS_INFO["3:TAG"]=""

MOOS_INFO["4:NAME"]="geodesy"
MOOS_INFO["4:URL"]="https://github.com/themoos/geodesy-moos.git"
MOOS_INFO["4:TAG"]=""

NUM_THREADS=1
START_DIRECTORY=$HOME

DO_IVP=false
DO_MOOS=false
DO_HOVER=false
DO_GOBY=false
COMPLETE_INSTALL=false
INTERACTIVE=true
HELP=false
VEHICLE=false
DISTCC_HOST="192.168.1.100"

ynprompt() {
    printf "$1 "
    read -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]] ; then
        printf "\n"
        return 0
    else
        printf "\n"
        return 1
    fi
}

for ARGI; do
    UNDEFINED_ARG=$ARGI
    if [ "${ARGI}" = "--help" -o "${ARGI}" = "-h" ] ; then
        HELP=true
        UNDEFINED_ARG=""
    elif [ "${ARGI:0:2}" = "-j" ] ; then
        NUM_THREADS="${ARGI#-j*}"
        UNDEFINED_ARG=""
    elif [ "${ARGI}" = "--force" -o "${ARGI}" = "-f" ] ; then
        INTERACTIVE="false"
        UNDEFINED_ARG=""
    elif [ "${ARGI}" = "--moos" -o "${ARGI}" = "-m" ] ; then
        DO_MOOS="true"
        UNDEFINED_ARG=""
    elif [ "${ARGI}" = "--ivp" -o "${ARGI}" = "-i" ] ; then
        DO_IVP="true"
        UNDEFINED_ARG=""
    elif [ "${ARGI}" = "--hover" -o "${ARGI}" = "-o" ] ; then
        DO_HOVER="true"
        UNDEFINED_ARG=""
    elif [ "${ARGI}" = "--goby" -o "${ARGI}" = "-o" ] ; then
        DO_GOBY="true"
        UNDEFINED_ARG=""
    elif [ "${ARGI}" = "--install" ] ; then
        DO_HOVER="true"
        DO_MOOS="true"
        DO_IVP="true"
        DO_GOBY="true"
        COMPLETE_INSTALL="true"
        UNDEFINED_ARG=""
    elif [ "${ARGI}" = "--all" ] ; then
        DO_HOVER="true"
        DO_MOOS="true"
        DO_IVP="true"
        DO_GOBY="true"
        UNDEFINED_ARG=""
    elif [ "${ARGI}" = "--vehicle" -o "${ARGI}" = "-v" ] ; then
        VEHICLE="true"
        UNDEFINED_ARG=""
    elif [ "${ARGI:0:14}" = "--distcc_host=" ] ; then
        DISTCC_HOST="${ARGI#--distcc_host=*}"
        UNDEFINED_ARG=""
    else
        START_DIRECTORY=${ARGI}
    fi
done

if [ "${#}" = "0" ] ; then
    HELP=true
fi

if $HELP ; then
    printf "Usage: hover_update [location] [-j4] [options]\n"
    printf "Options:                                      \n"
    printf "  --moos, -m             update moos          \n"
    printf "  --ivp, -i              update ivp           \n"
    printf "  --hover, -o            update hover         \n"
    printf "  --force, -f            non-interactive mode \n"
    printf "  --goby, -g             update goby          \n"
    printf "  --install              first time install (all)\n"
    printf "  --all                  update all           \n"
    printf "  --vehicle, -v          install for vehicle (no gui or shore apps)\n"
    printf "  --distcc_host=[ip]     set distcc host (default 192.168.1.100)\n"
    exit 1;
fi

# set hovergroup directories for vehicles vs. not vehicle
if $VEHICLE ; then
    HOVERGROUP_URL="https://hovergroup.googlecode.com/svn/trunk/ivp-extend"
    HOVERGROUP_SUB_DIR="hovergroup-extend"
    export DISTCC_HOSTS=$DISTCC_HOST
    export DISTCC_POTENTIAL_HOSTS=$DISTCC_HOST
    export CC="/usr/local/lib/distcc/arm-linux-gnueabi-gcc-4.6"
    export CXX="/usr/local/lib/distcc/arm-linux-gnueabi-g++-4.6"
else
    HOVERGROUP_URL="https://hovergroup.googlecode.com/svn/trunk"
    HOVERGROUP_SUB_DIR="hovergroup"
fi

# check start directory exists
if [ ! -d $START_DIRECTORY ] ; then
    printf "$START_DIRECTORY does not exist.\n"
    exit 1;
fi

# install packages for first time install
if $COMPLETE_INSTALL ; then
    sudo apt-get update
    sudo apt-get install build-essential libboost-all-dev libgsl0-dev subversion bzr cmake-curses-gui git
    if ! $VEHICLE ; then
        sudo apt-get install xterm libtiff4-dev freeglut3-dev libpng12-dev libxft-dev libxinerama-dev fluid default-jre libgmp3-dev witty witty-dev witty-doc witty-dbg
    fi
fi

# check for sub-directories and prompt to create
if ! $COMPLETE_INSTALL ; then
    if [[ "${DO_MOOS}" = "true" && ! -d $START_DIRECTORY/moos ]] ; then
        if ynprompt "$START_DIRECTORY/moos does not exist, create? [y/N]" ; then
            mkdir $START_DIRECTORY/moos
        else
            exit 1;
        fi
    fi
    if [[ "${DO_IVP}" = "true" && ! -d $START_DIRECTORY/moos-ivp ]] ; then
        if ! ynprompt "$START_DIRECTORY/moos-ivp does not exist. Continue anyway? [y/N]" ; then
            exit 1;
        fi
    fi
    if [[ "${DO_HOVER}" = "true" && ! -d $START_DIRECTORY/$HOVERGROUP_SUB_DIR ]] ; then
        if ! ynprompt "$START_DIRECTORY/$HOVERGROUP_SUB_DIR does not exist. Continue anyway? [y/N]" ; then
            exit 1;
        fi
    fi
else
    if [ ! -d $START_DIRECTORY/moos ] ; then
        mkdir $START_DIRECTORY/moos
    fi
fi

# --------  MOOS update block --------
if $DO_MOOS ; then
    echo -e "\e[1;93mUpdating MOOS\e[0m"
    
    for INDEX in {0..4} ; do
        cd $START_DIRECTORY/moos
        
        # check for subdirectory
        SUBDIR="${MOOS_INFO["$INDEX:NAME"]}-moos"
        echo -e "\e[93mUpdating $SUBDIR\e[0m"
        if [ ! -d $SUBDIR ] ; then
            git clone ${MOOS_INFO["$INDEX:URL"]} $SUBDIR
        fi
        cd $SUBDIR
        
        # check git url
        GIT_URL=$(git config --get remote.origin.url)
        if [ ! "${GIT_URL}" = "${MOOS_INFO["$INDEX:URL"]}" ] ; then
            # if incorrect, wipe directory and recreate
            if $INTERACTIVE ; then
                if ! ynprompt "Wipe $START_DIRECTORY/moos/$SUBDIR? [y/N]"; then
                    exit 1;
                fi
            fi
            cd $START_DIRECTORY/moos
            rm -rf $SUBDIR
            git clone ${MOOS_INFO["$INDEX:URL"]} $SUBDIR
            cd $SUBDIR
        fi
        
        # check local modifications
        git update-index -q --refresh  
        CHANGED=$(git diff-index --name-only HEAD --)
        if [ -n "$CHANGED" ] ; then
            REVERT=true
            if $INTERACTIVE ; then
                if ! ynprompt "Overwrite local modifications in $START_DIRECTORY/moos/$SUBDIR? [y/N]"; then
                    REVERT=false
                fi
            fi
            # revert local modifications
            if $REVERT ; then
                git checkout .
            fi
        fi
        
        # check tag
        if [ -z "${MOOS_INFO["$INDEX:TAG"]}" ] ; then
            # if no tag specified, just use master
            git checkout master
        else
            TAG=$(git describe --exact-match --tags HEAD)
            if [ ! "${TAG}" = "${MOOS_INFO["$INDEX:TAG"]}" ] ; then
                # tag mismatch
                REVERT=true
                if $INTERACTIVE ; then
                    if ! ynprompt "Reset to tag ${MOOS_INFO["$INDEX:TAG"]}? [y/N]"; then
                        REVERT=false
                    fi
                fi
                if $REVERT ; then
                    # check that tag exists
                    TAG=$(git tag -l | grep ${MOOS_INFO["$INDEX:TAG"]})
                    if [ -z "${TAG}" ] ; then
                        # if tag doesn't exist, try pulling the latest master
                        git checkout master
                        git pull
                        TAG=$(git tag -l | grep ${MOOS_INFO["$INDEX:TAG"]})
                        if [ -z "${TAG}" ] ; then
                            echo "Error: tag ${MOOS_INFO["$INDEX:TAG"]} does not exist."
                            exit 1;
                        fi
                    fi
                    git checkout tags/${MOOS_INFO["$INDEX:TAG"]}
                fi
            fi
        fi
        
        case "$INDEX" in
        # core
        0)  cmake -D DISABLE_NAMES_LOOKUP=ON -D USE_ASYNC_COMMS=ON .
            make -j$NUM_THREADS
            ;;
            
        # essential
        1)  cmake -D MOOS_DIR="$START_DIRECTORY/moos/core-moos" .
            make -j$NUM_THREADS
            ;;
            
        # ui
        2)  if $VEHICLE ; then
                cmake -D MOOS_DIR="$START_DIRECTORY/moos/core-moos" -D BUILD_GRAPHICAL_TOOLS=OFF .
            else
                cmake -D MOOS_DIR="$START_DIRECTORY/moos/core-moos" .
            fi
            make -j$NUM_THREADS
            ;;
            
        # matlab
        3)  ;;
        
        # geodesy
        4)  cmake .
            make -j$NUM_THREADS
            ;;
            
        esac
    done # for INDEX in {0..4}
fi # if $DO_MOOS

# --------  IVP update block --------
if $DO_IVP ; then
    echo -e "\e[1;93mUpdating IVP\e[0m"
    
    # if directory does not exist, do fresh checkout
    if [ ! -d $START_DIRECTORY/moos-ivp ] ; then
        svn checkout $MOOS_IVP_URL $START_DIRECTORY/moos-ivp
    fi
    cd $START_DIRECTORY/moos-ivp
    
    # pull out the svn url
    SVN_URL=$(svn info . | grep URL | sed 's/URL: //g')
    
    # check that we got a url - is this an svn directory?
    if [ -z "${SVN_URL}" ] ; then
        if $INTERACTIVE ; then
            if ! ynprompt "$START_DIRECTORY/moos-ivp is not an svn directory, wipe and fresh checkout? [y/N]"; then
                exit 1
            fi
        fi
        
        # fresh checkout
        cd ..; rm -rf moos-ivp
        svn checkout $MOOS_IVP_URL moos-ivp
        cd moos-ivp
    fi
    
    # check that url is correct
    if [ ! "${SVN_URL}" = "${MOOS_IVP_URL}" ] ; then
        SWITCH=true
        if $INTERACTIVE ; then
            if ! ynprompt "SVN URL is $SVN_URL. \nWipe directory and switch to ${MOOS_IVP_URL}? [y/N]"; then
                SWITCH=false
            fi
        fi
        
        # do fresh checkout
        if $SWITCH ; then
            cd ..; rm -rf moos-ivp
            svn checkout $MOOS_IVP_URL moos-ivp
            cd moos-ivp
        fi
    fi
    
    # update
    SVN_VAL=$(svn up)
    if [ -z "$SVN_VAL" ] ; then
        printf "ivp svn update failed"
        exit 1;
    fi
    
    # make sure link is correct
    rm MOOS
    ln -s $START_DIRECTORY/moos MOOS
    
    # build
    cd ivp/src
    if $VEHICLE ; then
        cmake -D IVP_BUILD_GUI_CODE=OFF .
        distcc-pump make -j$NUM_THREADS
    else
        cmake -D IVP_BUILD_GUI_CODE=ON .
        make -j$NUM_THREADS
    fi
fi # if $DO_IVP

# --------  goby update block --------
if $DO_GOBY ; then
    echo -e "\e[1;93mUpdating goby\e[0m"
    
    # if directory does not exist, do fresh checkout
    if [ ! -d $START_DIRECTORY/goby ] ; then
        bzr checkout $GOBY_URL $START_DIRECTORY/goby
    fi
    cd $START_DIRECTORY/goby
    
    # pull out the bzr url
    BZR_URL=$(bzr info | grep "checkout of branch" | sed 's/  checkout of branch: //g')
    
    # check that we got a url - is this a bzr directory?
    if [ -z "${BZR_URL}" ] ; then
        if $INTERACTIVE ; then
            if ! ynprompt "$START_DIRECTORY/goby is not a bzr directory, wipe and fresh checkout? [y/N]"; then
                exit 1
            fi
        fi
        
        # fresh checkout
        cd ..; rm -rf goby
        bzr checkout $GOBY_URL goby
        cd goby
    fi
    
    # check that url is correct
    if [ ! "${BZR_URL}" = "${GOBY_URL}" ] ; then
        SWITCH=true
        if $INTERACTIVE ; then
            if ! ynprompt "BZR URL is $BZR_URL. \nWipe directory and switch to ${GOBY_URL}? [y/N]"; then
                SWITCH=false
            fi
        fi
        
        # do fresh checkout
        if $SWITCH ; then
            cd ..; rm -rf goby
            bzr checkout $GOBY_URL goby
            cd goby
        fi
    fi
    
    bzr up
    
    if $COMPLETE_INSTALL ; then
        sudo ./DEPENDENCIES ubuntu
    fi
    cmake -D build_apps=OFF -D build_moos=OFF .
    make -j$NUM_THREADS
fi # if $DO_GOBY

# --------  hover update block --------
if $DO_HOVER ; then
    echo -e "\e[1;93mUpdating hover\e[0m"
    
    # if directory does not exist, do fresh checkout
    if [ ! -d $START_DIRECTORY/$HOVERGROUP_SUB_DIR ] ; then
        svn checkout $HOVERGROUP_URL $START_DIRECTORY/$HOVERGROUP_SUB_DIR
    fi
    cd $START_DIRECTORY/$HOVERGROUP_SUB_DIR
    
    # pull out the svn url
    SVN_URL=$(svn info . | grep URL | sed 's/URL: //g')
    
    # check that we got a url - is this an svn directory?
    if [ -z "${SVN_URL}" ] ; then
        if $INTERACTIVE ; then
            if ! ynprompt "$START_DIRECTORY/$HOVERGROUP_SUB_DIR is not an svn directory, wipe and fresh checkout? [y/N]"; then
                exit 1
            fi
        fi
        
        # fresh checkout
        cd ..; rm -rf $HOVERGROUP_SUB_DIR
        svn checkout $HOVERGROUP_URL $HOVERGROUP_SUB_DIR
        cd $HOVERGROUP_SUB_DIR
    fi
    
    # check that url is correct
    if [ ! "${SVN_URL}" = "${HOVERGROUP_URL}" ] ; then
        SWITCH=true
        if $INTERACTIVE ; then
            if ! ynprompt "SVN URL is $SVN_URL. \nWipe directory and switch to ${HOVERGROUP_URL}? [y/N]"; then
                SWITCH=false
            fi
        fi
        
        # do fresh checkout
        if $SWITCH ; then
            cd ..; rm -rf $HOVERGROUP_SUB_DIR
            svn checkout $HOVERGROUP_URL $HOVERGROUP_SUB_DIR
            cd $HOVERGROUP_SUB_DIR
        fi
    fi
    
    # update
    SVN_VAL=$(svn up)
    if [ -z "$SVN_VAL" ] ; then
        printf "hover svn update failed"
        exit 1;
    fi
    
    # build
    if $VEHICLE ; then
        cd trunk
        ./build_proto.sh
        cmake -D BOOST_146=ON -D BUILD_SHORE_APPS=OFF .
    else
        cd ivp-extend/trunk
        ./build_proto.sh
        cmake -D BOOST_146=ON -D BUILD_SHORE_APPS=ON .
    fi
    make -j$NUM_THREADS
fi # if $DO_HOVER

if $COMPLETE_INSTALL ; then
    cp ~/.bashrc ~/.bashrc.bck
    echo "" >> ~/.bashrc
    echo "" >> ~/.bashrc
    echo "# Created by hover_update script" >> ~/.bashrc
    echo "PATH=\$PATH:$START_DIRECTORY/moos/core-moos/bin" >> ~/.bashrc
    echo "PATH=\$PATH:$START_DIRECTORY/moos/essential-moos/bin" >> ~/.bashrc
    echo "PATH=\$PATH:$START_DIRECTORY/moos/ui-moos/bin" >> ~/.bashrc
    echo "PATH=\$PATH:$START_DIRECTORY/moos-ivp/bin" >> ~/.bashrc
    if $VEHICLE ; then
        echo "PATH=\$PATH:$START_DIRECTORY/hovergroup-extend/trunk/bin" >> ~/.bashrc
        echo "PATH=\$PATH:$START_DIRECTORY/hovergroup-extend/trunk/scripts" >> ~/.bashrc
        echo "PATH=\$PATH:/sbin" >> ~/.bashrc
        echo "" >> ~/.bashrc
        echo "export DISTCC_HOSTS=\"192.168.1.100\"" >> ~/.bashrc
        echo "export DISTCC_POTENTIAL_HOSTS=\"192.168.1.100\"" >> ~/.bashrc
        echo "export CC=\"/usr/local/lib/distcc/arm-linux-gnueabi-gcc-4.6\"" >> ~/.bashrc
        echo "export CXX=\"/usr/local/lib/distcc/arm-linux-gnueabi-g++-4.6\"" >> ~/.bashrc
    else
        echo "PATH=\$PATH:$START_DIRECTORY/hovergroup/ivp-extend/trunk/bin" >> ~/.bashrc
        echo "PATH=\$PATH:$START_DIRECTORY/hovergroup/ivp-extend/trunk/scripts" >> ~/.bashrc
    fi
fi

exit 0